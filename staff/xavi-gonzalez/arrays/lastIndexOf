///El método lastIndexOf() devuelve el último índice en el que un cierto elemento puede encontrarse en el array, ó -1 si el elemento no se encontrara. El array es recorrido en sentido contrario, empezando por el índice fromIndex.

delete Array.prototype.lastIndexOf

/*
function lastIndexOf (array, searchElement, index) {
    if (arguments === array.length || index > array.length) {
        for (let i = array.length -1; i < array.length; i--)
        if (array[i] === searchElement)
        return i
    }
    if (arguments.length < 0) {
        for ()
    }
}
    /*for (var i = 0; i < array.length -1; i--) {
       if (array[i] === searchElement)
       return i 
    }
}
*/



//CASE 1
const animals = ['Dog', 'Tiger', 'Penguin', 'Dog'];

console.log(animals.lastIndexOf('Dog'));
// Expected output: 3
console.log(animals.lastIndexOf('Tiger'));
// Expected output: 1


//CASE 2
var array = [2, 5, 9, 2];
array.lastIndexOf(2); // 3
array.lastIndexOf(7); // -1
array.lastIndexOf(2, 3); // 3
array.lastIndexOf(2, 2); // 0
array.lastIndexOf(2, -2); // 0
array.lastIndexOf(2, -1); // 3


/*SOLUCION
debugger
function lastIndexOf (array, searchElement, index) {
  debugger
if (index > array.length) {
  index = 0
}  
else if (index < 0){
  for (let i = array.length -1; i < array.length; i--)
        if (array[i] === searchElement)
        return i
    }
  for (var i = index; i < array.length; i++)
}
        
return -1


//CASE 1
const animals = ['Dog', 'Tiger', 'Penguin', 'Dog'];

console.log(lastIndexOf('Dog'));
// Expected output: 3
console.log(lastIndexOf('Tiger'));
// Expected output: 1


//CASE 2
var array = [2, 5, 9, 2];
var num = 2
var index = 1

var result = lastIndexOf(array,num,index)
console.log(result)
//OUTPUT 3

//array.lastIndexOf(2); // 3
//array.lastIndexOf(7); // -1
//array.lastIndexOf(2, 3); // 3
//array.lastIndexOf(2, 2); // 0
//array.lastIndexOf(2, -2); // 0
array.lastIndexOf(2, -1); // 3
*/
